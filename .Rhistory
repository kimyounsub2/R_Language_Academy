a <- 1
git add -A
git add -A
git add -A
mean(x)
# console 창 삭제 : ctrl + L
# ctrl + shift +c : 전체주석
x <- c(1, 2, 3)
mean(x)
##### 변수 #####
# <-(할당연산자) : alt + -
# 실행 + enter
# 전체 실행 : ctrl + alt + r
# install.packages("ggplot2") 패키지 설치 처음만 설치하면 된다.
library(ggplot2) # 패키지 로드 재실행시 로드시켜줘야 한다.
##### 변수 #####
# <-(할당연산자) : alt + -
# 실행 + enter
# 전체 실행 : ctrl + alt + r
install.packages("ggplot2") #패키지 설치 처음만 설치하면 된다.
# install.packages("descr")
library(descr)
##### 변수 #####
# <-(할당연산자) : alt + -
# 실행 + enter
# 전체 실행 : ctrl + alt + r
# install.packages("ggplot2") 패키지 설치 처음만 설치하면 된다.
install.packages("dplyr")
##### 변수 #####
# <-(할당연산자) : alt + -
# 실행 + enter
# 전체 실행 : ctrl + alt + r
# install.packages("ggplot2") 패키지 설치 처음만 설치하면 된다.
install.packages("readxl")
##### 변수 #####
# <-(할당연산자) : alt + -
# 실행 + enter
# 전체 실행 : ctrl + alt + r
# install.packages("ggplot2") 패키지 설치 처음만 설치하면 된다.
install.packages("descr")
library(ggplot2) # 패키지 로드 재실행시 로드시켜줘야 한다.
library(dplyr)
library(readxl) # 엑셀 불러오는 패키지
library(descr) # 빈도 분석 패키지
install.packages("multilinguer")
library(multilinguer)
install_jdk()
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"),type = "binary")
remotes::install_github("haven-jeon/KoNLP",
upgrade = "never",
INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(KoNLP)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
library(KoNLP)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP",
upgrade = "never",
INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
library(KoNLP)
library(KoNLP)
library(KoNLP)
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
library(KoNLP)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
library(KoNLP)
# install.packages("multilinguer")
library(multilinguer)
install.packages("multilinguer")
install.packages("multilinguer")
library(multilinguer)
install_jdk()
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"),type = "binary")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP",
upgrade = "never",
INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(KoNLP)
#install.packages("KoNLP")
install.packages("rJava")
install.packages("memoise")
install.packages("KoNLP")
library(KoNLP)
library(KoNLP)
library(dplyr)
library(KoNLP)
install.packages("remotes")
install.packages("remotes")
library(KoNLP)
remotes::install_github("haven-jeon/KoNLP",
upgrade = "never",
INSTALL_opts = c("--no-multiarch")))
remotes::install_github("haven-jeon/KoNLP",
upgrade = "never",
INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(KoNLP)
git add -A
# 미국 주별 강력 범죄율 단계 구분도 만들기
install.packages("ggiraphExtra")
# 미국 주별 강력 범죄율 단계 구분도 만들기
# install.packages("ggiraphExtra")
library(ggiraphExtra)
str(USArrests)
head(USArrests)
library(tibble) # 행이름 변수로 바꾸기 위해
# 행 이름을 state 변수로 바꿔 데이터 프레임 생성
crime <- rownames_to_column(USArrests, var = "state")
# 지도 데이터와 동일하게 맞추기 위해 state 의 값을 소문자로 수정
crime$state <- tolower(crime$state)
str(crime)
# 미국 주 지도 데이터 준비하기
library(ggplot2)
states_map <- map_data("state")
str(states_map)
# 단계 구분도 패키지 설치
install.packages("mapproj")
library(mapproj)
# 단계 구분도 만들기
ggChoropleth(data = crime, # 지도에 표현할 데이터
aes(fill = Murder, # 색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map, # 지도 데이터
interactive = T) # 인터랙티브
# 대한민국 시도별 인구, 결핵 환자 수 단계 구분도 만들기
# 대한민국 시도별 인구 단계 구분도 만들기
install.packages("stringi")
install.packages("stringi")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
# 대한민국 시도별 인구 데이터 준비하기
str(changeCode(korpop1)) # 한글꺠지기 쉬어 changeCode사용
# 한글 출력시 문제가 발생할수 있어 컬럼명을 바꾸자
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(changeCode(kormap1))
# 단계 구분도 만드기
ggChoropleth(data = korpop1, # 지도에 표현할 데이터
aes(fill = pop, # 색깔로 표현할 변수
map_id = code, # 지역 기준 변수
tooltip = name), # 지도 위에 표시할 지역명
map = kormap1, # 지도 데이터
interactive = T) # 인터랙티브
korpop1$name <- iconv(korpop1$name, "UTF-8","CP949") # 한글변환
# 대한민국 시도별 결핵 환자 수 단계 구분도 만들기
str(changeCode(tbc)) # tbc는 결핵환자수
ggChoropleth(data = tbc, # 지도에 표현할 데이터
aes(fill = NewPts, # 색깔로 표현할 변수
map_id = code, # 지역 기준 변수
tooltip = name), # 지도 위에 표시할 지역명
map = kormap1, # 지도 데이터
interactive = T) # 인터랙티브
# 미국 주별 강력 범죄율 단계 구분도 만들기
# install.packages("ggiraphExtra")
library(ggiraphExtra)
ggChoropleth(data = tbc, # 지도에 표현할 데이터
aes(fill = NewPts, # 색깔로 표현할 변수
map_id = code, # 지역 기준 변수
tooltip = name), # 지도 위에 표시할 지역명
map = kormap1, # 지도 데이터
interactive = T) # 인터랙티브
library(descr) # 빈도 분석 패키지
library(foreign) # SPSS 파일 로드
library(dplyr) # 전처리
library(ggplot2) # 시각화
library(readxl) # 엑셀 파일 불러오기
library(plotly) # 인터랙티브 그래프 만들기
library(dygraphs) # 인터랙티브 시계열 그래프 만들기
library(xts) # 시간 순서 속성을 지니는 xts 데이터 타입으로 변경
install.packages("xts") # foreign 패키지 설치
library(readxl) # 엑셀 파일 불러오기
install.packages("plotly") # foreign 패키지 설치
library(readxl) # 엑셀 파일 불러오기
library(plotly) # 인터랙티브 그래프 만들기
library(dygraphs) # 인터랙티브 시계열 그래프 만들기
library(xts) # 시간 순서 속성을 지니는 xts 데이터 타입으로 변경
install.packages("dygraphs") # foreign 패키지 설치
ggChoropleth(data = tbc, # 지도에 표현할 데이터
aes(fill = NewPts, # 색깔로 표현할 변수
map_id = code, # 지역 기준 변수
tooltip = name), # 지도 위에 표시할 지역명
map = kormap1, # 지도 데이터
interactive = T) # 인터랙티브
tbc$name <- iconv(tbc$name, "UTF-8","CP949")
# 구글지도 가져오기
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("dkahle/ggmap")
install.packages("ggmap")
library(ggmap)
